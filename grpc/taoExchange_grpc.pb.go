// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: taoExchange.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaoExchangeSrv_QueryOrder_FullMethodName     = "/grpc.TaoExchangeSrv/queryOrder"
	TaoExchangeSrv_DoOrderCommond_FullMethodName = "/grpc.TaoExchangeSrv/doOrderCommond"
)

// TaoExchangeSrvClient is the client API for TaoExchangeSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaoExchangeSrvClient interface {
	QueryOrder(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRsp, error)
	DoOrderCommond(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRsp, error)
}

type taoExchangeSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewTaoExchangeSrvClient(cc grpc.ClientConnInterface) TaoExchangeSrvClient {
	return &taoExchangeSrvClient{cc}
}

func (c *taoExchangeSrvClient) QueryOrder(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRsp, error) {
	out := new(QueryRsp)
	err := c.cc.Invoke(ctx, TaoExchangeSrv_QueryOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoExchangeSrvClient) DoOrderCommond(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRsp, error) {
	out := new(OrderRsp)
	err := c.cc.Invoke(ctx, TaoExchangeSrv_DoOrderCommond_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaoExchangeSrvServer is the server API for TaoExchangeSrv service.
// All implementations must embed UnimplementedTaoExchangeSrvServer
// for forward compatibility
type TaoExchangeSrvServer interface {
	QueryOrder(context.Context, *QueryReq) (*QueryRsp, error)
	DoOrderCommond(context.Context, *OrderReq) (*OrderRsp, error)
	mustEmbedUnimplementedTaoExchangeSrvServer()
}

// UnimplementedTaoExchangeSrvServer must be embedded to have forward compatible implementations.
type UnimplementedTaoExchangeSrvServer struct {
}

func (UnimplementedTaoExchangeSrvServer) QueryOrder(context.Context, *QueryReq) (*QueryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (UnimplementedTaoExchangeSrvServer) DoOrderCommond(context.Context, *OrderReq) (*OrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoOrderCommond not implemented")
}
func (UnimplementedTaoExchangeSrvServer) mustEmbedUnimplementedTaoExchangeSrvServer() {}

// UnsafeTaoExchangeSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaoExchangeSrvServer will
// result in compilation errors.
type UnsafeTaoExchangeSrvServer interface {
	mustEmbedUnimplementedTaoExchangeSrvServer()
}

func RegisterTaoExchangeSrvServer(s grpc.ServiceRegistrar, srv TaoExchangeSrvServer) {
	s.RegisterService(&TaoExchangeSrv_ServiceDesc, srv)
}

func _TaoExchangeSrv_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoExchangeSrvServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaoExchangeSrv_QueryOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoExchangeSrvServer).QueryOrder(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoExchangeSrv_DoOrderCommond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoExchangeSrvServer).DoOrderCommond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaoExchangeSrv_DoOrderCommond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoExchangeSrvServer).DoOrderCommond(ctx, req.(*OrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaoExchangeSrv_ServiceDesc is the grpc.ServiceDesc for TaoExchangeSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaoExchangeSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TaoExchangeSrv",
	HandlerType: (*TaoExchangeSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "queryOrder",
			Handler:    _TaoExchangeSrv_QueryOrder_Handler,
		},
		{
			MethodName: "doOrderCommond",
			Handler:    _TaoExchangeSrv_DoOrderCommond_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taoExchange.proto",
}

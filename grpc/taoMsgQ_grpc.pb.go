// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: taoMsgQ.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaoBroker_Cmd_FullMethodName  = "/grpc.TaoBroker/cmd"
	TaoBroker_Pub_FullMethodName  = "/grpc.TaoBroker/pub"
	TaoBroker_Sync_FullMethodName = "/grpc.TaoBroker/sync"
	TaoBroker_Sub_FullMethodName  = "/grpc.TaoBroker/sub"
)

// TaoBrokerClient is the client API for TaoBroker api.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaoBrokerClient interface {
	Cmd(ctx context.Context, in *TaoMsgCmdReq, opts ...grpc.CallOption) (*TaoMsgCmdRsp, error)
	Pub(ctx context.Context, in *TaoMsgReq, opts ...grpc.CallOption) (*TaoMsgRsp, error)
	Sync(ctx context.Context, in *TaoMsgReq, opts ...grpc.CallOption) (*TaoMsgRsp, error)
	Sub(ctx context.Context, in *TaoSubReq, opts ...grpc.CallOption) (TaoBroker_SubClient, error)
}

type taoBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaoBrokerClient(cc grpc.ClientConnInterface) TaoBrokerClient {
	return &taoBrokerClient{cc}
}

func (c *taoBrokerClient) Cmd(ctx context.Context, in *TaoMsgCmdReq, opts ...grpc.CallOption) (*TaoMsgCmdRsp, error) {
	out := new(TaoMsgCmdRsp)
	err := c.cc.Invoke(ctx, TaoBroker_Cmd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBrokerClient) Pub(ctx context.Context, in *TaoMsgReq, opts ...grpc.CallOption) (*TaoMsgRsp, error) {
	out := new(TaoMsgRsp)
	err := c.cc.Invoke(ctx, TaoBroker_Pub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBrokerClient) Sync(ctx context.Context, in *TaoMsgReq, opts ...grpc.CallOption) (*TaoMsgRsp, error) {
	out := new(TaoMsgRsp)
	err := c.cc.Invoke(ctx, TaoBroker_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBrokerClient) Sub(ctx context.Context, in *TaoSubReq, opts ...grpc.CallOption) (TaoBroker_SubClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaoBroker_ServiceDesc.Streams[0], TaoBroker_Sub_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &taoBrokerSubClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaoBroker_SubClient interface {
	Recv() (*TaoMsgReq, error)
	grpc.ClientStream
}

type taoBrokerSubClient struct {
	grpc.ClientStream
}

func (x *taoBrokerSubClient) Recv() (*TaoMsgReq, error) {
	m := new(TaoMsgReq)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaoBrokerServer is the server API for TaoBroker api.
// All implementations must embed UnimplementedTaoBrokerServer
// for forward compatibility
type TaoBrokerServer interface {
	Cmd(context.Context, *TaoMsgCmdReq) (*TaoMsgCmdRsp, error)
	Pub(context.Context, *TaoMsgReq) (*TaoMsgRsp, error)
	Sync(context.Context, *TaoMsgReq) (*TaoMsgRsp, error)
	Sub(*TaoSubReq, TaoBroker_SubServer) error
	mustEmbedUnimplementedTaoBrokerServer()
}

// UnimplementedTaoBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedTaoBrokerServer struct {
}

func (UnimplementedTaoBrokerServer) Cmd(context.Context, *TaoMsgCmdReq) (*TaoMsgCmdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cmd not implemented")
}
func (UnimplementedTaoBrokerServer) Pub(context.Context, *TaoMsgReq) (*TaoMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pub not implemented")
}
func (UnimplementedTaoBrokerServer) Sync(context.Context, *TaoMsgReq) (*TaoMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedTaoBrokerServer) Sub(*TaoSubReq, TaoBroker_SubServer) error {
	return status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (UnimplementedTaoBrokerServer) mustEmbedUnimplementedTaoBrokerServer() {}

// UnsafeTaoBrokerServer may be embedded to opt out of forward compatibility for this api.
// Use of this interface is not recommended, as added methods to TaoBrokerServer will
// result in compilation errors.
type UnsafeTaoBrokerServer interface {
	mustEmbedUnimplementedTaoBrokerServer()
}

func RegisterTaoBrokerServer(s grpc.ServiceRegistrar, srv TaoBrokerServer) {
	s.RegisterService(&TaoBroker_ServiceDesc, srv)
}

func _TaoBroker_Cmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaoMsgCmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBrokerServer).Cmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaoBroker_Cmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBrokerServer).Cmd(ctx, req.(*TaoMsgCmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBroker_Pub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBrokerServer).Pub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaoBroker_Pub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBrokerServer).Pub(ctx, req.(*TaoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBroker_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBrokerServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaoBroker_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBrokerServer).Sync(ctx, req.(*TaoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBroker_Sub_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaoSubReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaoBrokerServer).Sub(m, &taoBrokerSubServer{stream})
}

type TaoBroker_SubServer interface {
	Send(*TaoMsgReq) error
	grpc.ServerStream
}

type taoBrokerSubServer struct {
	grpc.ServerStream
}

func (x *taoBrokerSubServer) Send(m *TaoMsgReq) error {
	return x.ServerStream.SendMsg(m)
}

// TaoBroker_ServiceDesc is the grpc.ServiceDesc for TaoBroker api.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaoBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TaoBroker",
	HandlerType: (*TaoBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "cmd",
			Handler:    _TaoBroker_Cmd_Handler,
		},
		{
			MethodName: "pub",
			Handler:    _TaoBroker_Pub_Handler,
		},
		{
			MethodName: "sync",
			Handler:    _TaoBroker_Sync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sub",
			Handler:       _TaoBroker_Sub_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "taoMsgQ.proto",
}

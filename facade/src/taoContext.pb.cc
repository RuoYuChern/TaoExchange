// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taoContext.proto

#include "taoContext.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace taocontext {
PROTOBUF_CONSTEXPR OrderDto::OrderDto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.side_)*/ 0

  , /*decltype(_impl_.commond_)*/ 0

  , /*decltype(_impl_.version_)*/ 0

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.price_)*/ ::int64_t{0}

  , /*decltype(_impl_.reservebidprice_)*/ ::int64_t{0}

  , /*decltype(_impl_.amount_)*/ ::int64_t{0}

  , /*decltype(_impl_.takerfee_)*/ ::int64_t{0}

  , /*decltype(_impl_.makerfee_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderDtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderDtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderDtoDefaultTypeInternal() {}
  union {
    OrderDto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderDtoDefaultTypeInternal _OrderDto_default_instance_;
PROTOBUF_CONSTEXPR OrderReplyDto::OrderReplyDto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replyid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr
  , /*decltype(_impl_.filled_)*/ ::int64_t{0}

  , /*decltype(_impl_.left_)*/ ::int64_t{0}

  , /*decltype(_impl_.free_)*/ ::int64_t{0}

  , /*decltype(_impl_.commond_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderReplyDtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderReplyDtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderReplyDtoDefaultTypeInternal() {}
  union {
    OrderReplyDto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderReplyDtoDefaultTypeInternal _OrderReplyDto_default_instance_;
PROTOBUF_CONSTEXPR MarketDto::MarketDto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.target_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.money_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.targetprec_)*/ 0

  , /*decltype(_impl_.moneyprec_)*/ 0

  , /*decltype(_impl_.minamount_)*/ ::int64_t{0}

  , /*decltype(_impl_.minbase_)*/ ::int64_t{0}

  , /*decltype(_impl_.feeprec_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDtoDefaultTypeInternal() {}
  union {
    MarketDto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDtoDefaultTypeInternal _MarketDto_default_instance_;
}  // namespace taocontext
static ::_pb::Metadata file_level_metadata_taoContext_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_taoContext_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_taoContext_2eproto = nullptr;
const ::uint32_t TableStruct_taoContext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.side_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.commond_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.reservebidprice_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.takerfee_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.makerfee_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.market_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.userid_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderDto, _impl_.source_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderReplyDto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderReplyDto, _impl_.replyid_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderReplyDto, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderReplyDto, _impl_.commond_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderReplyDto, _impl_.filled_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderReplyDto, _impl_.left_),
    PROTOBUF_FIELD_OFFSET(::taocontext::OrderReplyDto, _impl_.free_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::taocontext::MarketDto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::taocontext::MarketDto, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::taocontext::MarketDto, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::taocontext::MarketDto, _impl_.money_),
    PROTOBUF_FIELD_OFFSET(::taocontext::MarketDto, _impl_.targetprec_),
    PROTOBUF_FIELD_OFFSET(::taocontext::MarketDto, _impl_.moneyprec_),
    PROTOBUF_FIELD_OFFSET(::taocontext::MarketDto, _impl_.feeprec_),
    PROTOBUF_FIELD_OFFSET(::taocontext::MarketDto, _impl_.minamount_),
    PROTOBUF_FIELD_OFFSET(::taocontext::MarketDto, _impl_.minbase_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::taocontext::OrderDto)},
        { 22, -1, -1, sizeof(::taocontext::OrderReplyDto)},
        { 36, -1, -1, sizeof(::taocontext::MarketDto)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::taocontext::_OrderDto_default_instance_._instance,
    &::taocontext::_OrderReplyDto_default_instance_._instance,
    &::taocontext::_MarketDto_default_instance_._instance,
};
const char descriptor_table_protodef_taoContext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020taoContext.proto\022\ntaocontext\"\266\002\n\010Order"
    "Dto\022\n\n\002id\030\001 \001(\t\022#\n\004type\030\002 \001(\0162\025.taoconte"
    "xt.OrderType\022\"\n\004side\030\003 \001(\0162\024.taocontext."
    "OrderSid\022%\n\007commond\030\004 \001(\0162\024.taocontext.O"
    "rderCmd\022\017\n\007version\030\005 \001(\005\022\021\n\ttimestamp\030\006 "
    "\001(\003\022\r\n\005price\030\007 \001(\003\022\027\n\017reserveBidPrice\030\010 "
    "\001(\003\022\016\n\006amount\030\t \001(\003\022\020\n\010takerFee\030\013 \001(\003\022\020\n"
    "\010makerFee\030\014 \001(\003\022\016\n\006market\030\r \001(\t\022\016\n\006userI"
    "d\030\016 \001(\t\022\016\n\006source\030\017 \001(\t\"\230\001\n\rOrderReplyDt"
    "o\022\017\n\007replyId\030\001 \001(\t\022#\n\005order\030\002 \001(\0132\024.taoc"
    "ontext.OrderDto\022%\n\007commond\030\003 \001(\0162\024.taoco"
    "ntext.OrderCmd\022\016\n\006filled\030\004 \001(\003\022\014\n\004left\030\005"
    " \001(\003\022\014\n\004free\030\006 \001(\003\"\226\001\n\tMarketDto\022\016\n\006symb"
    "ol\030\001 \001(\t\022\016\n\006target\030\002 \001(\t\022\r\n\005money\030\003 \001(\t\022"
    "\022\n\ntargetPrec\030\004 \001(\005\022\021\n\tmoneyPrec\030\005 \001(\005\022\017"
    "\n\007feePrec\030\006 \001(\005\022\021\n\tminAmount\030\007 \001(\003\022\017\n\007mi"
    "nBase\030\010 \001(\003*F\n\tOrderType\022\007\n\003GTC\020\000\022\007\n\003IOC"
    "\020\001\022\016\n\nIOC_BUDGET\020\002\022\007\n\003FOK\020\003\022\016\n\nFOK_BUDGE"
    "T\020\004*\036\n\010OrderSid\022\t\n\005OFFER\020\000\022\007\n\003BID\020\001*O\n\010O"
    "rderCmd\022\t\n\005PLACE\020\000\022\010\n\004MOVE\020\001\022\n\n\006CANCEL\020\002"
    "\022\n\n\006REDUCE\020\003\022\n\n\006REJECT\020\004\022\n\n\006ACCEPT\020\005b\006pr"
    "oto3"
};
static ::absl::once_flag descriptor_table_taoContext_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_taoContext_2eproto = {
    false,
    false,
    844,
    descriptor_table_protodef_taoContext_2eproto,
    "taoContext.proto",
    &descriptor_table_taoContext_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_taoContext_2eproto::offsets,
    file_level_metadata_taoContext_2eproto,
    file_level_enum_descriptors_taoContext_2eproto,
    file_level_service_descriptors_taoContext_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_taoContext_2eproto_getter() {
  return &descriptor_table_taoContext_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_taoContext_2eproto(&descriptor_table_taoContext_2eproto);
namespace taocontext {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_taoContext_2eproto);
  return file_level_enum_descriptors_taoContext_2eproto[0];
}
bool OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderSid_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_taoContext_2eproto);
  return file_level_enum_descriptors_taoContext_2eproto[1];
}
bool OrderSid_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderCmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_taoContext_2eproto);
  return file_level_enum_descriptors_taoContext_2eproto[2];
}
bool OrderCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class OrderDto::_Internal {
 public:
};

OrderDto::OrderDto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:taocontext.OrderDto)
}
OrderDto::OrderDto(const OrderDto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderDto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.market_) {}

    , decltype(_impl_.userid_) {}

    , decltype(_impl_.source_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.side_) {}

    , decltype(_impl_.commond_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.reservebidprice_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.takerfee_) {}

    , decltype(_impl_.makerfee_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market().empty()) {
    _this->_impl_.market_.Set(from._internal_market(), _this->GetArenaForAllocation());
  }
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source().empty()) {
    _this->_impl_.source_.Set(from._internal_source(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.makerfee_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.makerfee_));
  // @@protoc_insertion_point(copy_constructor:taocontext.OrderDto)
}

inline void OrderDto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.market_) {}

    , decltype(_impl_.userid_) {}

    , decltype(_impl_.source_) {}

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.side_) { 0 }

    , decltype(_impl_.commond_) { 0 }

    , decltype(_impl_.version_) { 0 }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , decltype(_impl_.price_) { ::int64_t{0} }

    , decltype(_impl_.reservebidprice_) { ::int64_t{0} }

    , decltype(_impl_.amount_) { ::int64_t{0} }

    , decltype(_impl_.takerfee_) { ::int64_t{0} }

    , decltype(_impl_.makerfee_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderDto::~OrderDto() {
  // @@protoc_insertion_point(destructor:taocontext.OrderDto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderDto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.market_.Destroy();
  _impl_.userid_.Destroy();
  _impl_.source_.Destroy();
}

void OrderDto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderDto::Clear() {
// @@protoc_insertion_point(message_clear_start:taocontext.OrderDto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.market_.ClearToEmpty();
  _impl_.userid_.ClearToEmpty();
  _impl_.source_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.makerfee_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.makerfee_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderDto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taocontext.OrderDto.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .taocontext.OrderType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::taocontext::OrderType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .taocontext.OrderSid side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::taocontext::OrderSid>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .taocontext.OrderCmd commond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_commond(static_cast<::taocontext::OrderCmd>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 reserveBidPrice = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.reservebidprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 amount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 takerFee = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.takerfee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 makerFee = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.makerfee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string market = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_market();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taocontext.OrderDto.market"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string userId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taocontext.OrderDto.userId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taocontext.OrderDto.source"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderDto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taocontext.OrderDto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taocontext.OrderDto.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .taocontext.OrderType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // .taocontext.OrderSid side = 3;
  if (this->_internal_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_side(), target);
  }

  // .taocontext.OrderCmd commond = 4;
  if (this->_internal_commond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_commond(), target);
  }

  // int32 version = 5;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_version(), target);
  }

  // int64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_timestamp(), target);
  }

  // int64 price = 7;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        7, this->_internal_price(), target);
  }

  // int64 reserveBidPrice = 8;
  if (this->_internal_reservebidprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_reservebidprice(), target);
  }

  // int64 amount = 9;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_amount(), target);
  }

  // int64 takerFee = 11;
  if (this->_internal_takerfee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        11, this->_internal_takerfee(), target);
  }

  // int64 makerFee = 12;
  if (this->_internal_makerfee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        12, this->_internal_makerfee(), target);
  }

  // string market = 13;
  if (!this->_internal_market().empty()) {
    const std::string& _s = this->_internal_market();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taocontext.OrderDto.market");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string userId = 14;
  if (!this->_internal_userid().empty()) {
    const std::string& _s = this->_internal_userid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taocontext.OrderDto.userId");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string source = 15;
  if (!this->_internal_source().empty()) {
    const std::string& _s = this->_internal_source();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taocontext.OrderDto.source");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taocontext.OrderDto)
  return target;
}

::size_t OrderDto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taocontext.OrderDto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string market = 13;
  if (!this->_internal_market().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market());
  }

  // string userId = 14;
  if (!this->_internal_userid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_userid());
  }

  // string source = 15;
  if (!this->_internal_source().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source());
  }

  // .taocontext.OrderType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .taocontext.OrderSid side = 3;
  if (this->_internal_side() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .taocontext.OrderCmd commond = 4;
  if (this->_internal_commond() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_commond());
  }

  // int32 version = 5;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_version());
  }

  // int64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_timestamp());
  }

  // int64 price = 7;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_price());
  }

  // int64 reserveBidPrice = 8;
  if (this->_internal_reservebidprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_reservebidprice());
  }

  // int64 amount = 9;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_amount());
  }

  // int64 takerFee = 11;
  if (this->_internal_takerfee() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_takerfee());
  }

  // int64 makerFee = 12;
  if (this->_internal_makerfee() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_makerfee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderDto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderDto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderDto::GetClassData() const { return &_class_data_; }


void OrderDto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderDto*>(&to_msg);
  auto& from = static_cast<const OrderDto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taocontext.OrderDto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_market().empty()) {
    _this->_internal_set_market(from._internal_market());
  }
  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_source().empty()) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_side() != 0) {
    _this->_internal_set_side(from._internal_side());
  }
  if (from._internal_commond() != 0) {
    _this->_internal_set_commond(from._internal_commond());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_reservebidprice() != 0) {
    _this->_internal_set_reservebidprice(from._internal_reservebidprice());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_takerfee() != 0) {
    _this->_internal_set_takerfee(from._internal_takerfee());
  }
  if (from._internal_makerfee() != 0) {
    _this->_internal_set_makerfee(from._internal_makerfee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderDto::CopyFrom(const OrderDto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taocontext.OrderDto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDto::IsInitialized() const {
  return true;
}

void OrderDto::InternalSwap(OrderDto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_, lhs_arena,
                                       &other->_impl_.market_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_, lhs_arena,
                                       &other->_impl_.source_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderDto, _impl_.makerfee_)
      + sizeof(OrderDto::_impl_.makerfee_)
      - PROTOBUF_FIELD_OFFSET(OrderDto, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderDto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_taoContext_2eproto_getter, &descriptor_table_taoContext_2eproto_once,
      file_level_metadata_taoContext_2eproto[0]);
}
// ===================================================================

class OrderReplyDto::_Internal {
 public:
  static const ::taocontext::OrderDto& order(const OrderReplyDto* msg);
};

const ::taocontext::OrderDto&
OrderReplyDto::_Internal::order(const OrderReplyDto* msg) {
  return *msg->_impl_.order_;
}
OrderReplyDto::OrderReplyDto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:taocontext.OrderReplyDto)
}
OrderReplyDto::OrderReplyDto(const OrderReplyDto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderReplyDto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replyid_) {}

    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.filled_) {}

    , decltype(_impl_.left_) {}

    , decltype(_impl_.free_) {}

    , decltype(_impl_.commond_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.replyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.replyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_replyid().empty()) {
    _this->_impl_.replyid_.Set(from._internal_replyid(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_order()) {
    _this->_impl_.order_ = new ::taocontext::OrderDto(*from._impl_.order_);
  }
  ::memcpy(&_impl_.filled_, &from._impl_.filled_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.commond_) -
    reinterpret_cast<char*>(&_impl_.filled_)) + sizeof(_impl_.commond_));
  // @@protoc_insertion_point(copy_constructor:taocontext.OrderReplyDto)
}

inline void OrderReplyDto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.replyid_) {}

    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.filled_) { ::int64_t{0} }

    , decltype(_impl_.left_) { ::int64_t{0} }

    , decltype(_impl_.free_) { ::int64_t{0} }

    , decltype(_impl_.commond_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.replyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.replyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderReplyDto::~OrderReplyDto() {
  // @@protoc_insertion_point(destructor:taocontext.OrderReplyDto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderReplyDto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replyid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void OrderReplyDto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderReplyDto::Clear() {
// @@protoc_insertion_point(message_clear_start:taocontext.OrderReplyDto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replyid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
  ::memset(&_impl_.filled_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.commond_) -
      reinterpret_cast<char*>(&_impl_.filled_)) + sizeof(_impl_.commond_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderReplyDto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string replyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_replyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taocontext.OrderReplyDto.replyId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .taocontext.OrderDto order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .taocontext.OrderCmd commond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_commond(static_cast<::taocontext::OrderCmd>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 filled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 free = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderReplyDto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taocontext.OrderReplyDto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string replyId = 1;
  if (!this->_internal_replyid().empty()) {
    const std::string& _s = this->_internal_replyid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taocontext.OrderReplyDto.replyId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .taocontext.OrderDto order = 2;
  if (this->_internal_has_order()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  // .taocontext.OrderCmd commond = 3;
  if (this->_internal_commond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_commond(), target);
  }

  // int64 filled = 4;
  if (this->_internal_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_filled(), target);
  }

  // int64 left = 5;
  if (this->_internal_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_left(), target);
  }

  // int64 free = 6;
  if (this->_internal_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_free(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taocontext.OrderReplyDto)
  return target;
}

::size_t OrderReplyDto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taocontext.OrderReplyDto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string replyId = 1;
  if (!this->_internal_replyid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_replyid());
  }

  // .taocontext.OrderDto order = 2;
  if (this->_internal_has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  // int64 filled = 4;
  if (this->_internal_filled() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_filled());
  }

  // int64 left = 5;
  if (this->_internal_left() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_left());
  }

  // int64 free = 6;
  if (this->_internal_free() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_free());
  }

  // .taocontext.OrderCmd commond = 3;
  if (this->_internal_commond() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_commond());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderReplyDto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderReplyDto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderReplyDto::GetClassData() const { return &_class_data_; }


void OrderReplyDto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderReplyDto*>(&to_msg);
  auto& from = static_cast<const OrderReplyDto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taocontext.OrderReplyDto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_replyid().empty()) {
    _this->_internal_set_replyid(from._internal_replyid());
  }
  if (from._internal_has_order()) {
    _this->_internal_mutable_order()->::taocontext::OrderDto::MergeFrom(
        from._internal_order());
  }
  if (from._internal_filled() != 0) {
    _this->_internal_set_filled(from._internal_filled());
  }
  if (from._internal_left() != 0) {
    _this->_internal_set_left(from._internal_left());
  }
  if (from._internal_free() != 0) {
    _this->_internal_set_free(from._internal_free());
  }
  if (from._internal_commond() != 0) {
    _this->_internal_set_commond(from._internal_commond());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderReplyDto::CopyFrom(const OrderReplyDto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taocontext.OrderReplyDto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderReplyDto::IsInitialized() const {
  return true;
}

void OrderReplyDto::InternalSwap(OrderReplyDto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.replyid_, lhs_arena,
                                       &other->_impl_.replyid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderReplyDto, _impl_.commond_)
      + sizeof(OrderReplyDto::_impl_.commond_)
      - PROTOBUF_FIELD_OFFSET(OrderReplyDto, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderReplyDto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_taoContext_2eproto_getter, &descriptor_table_taoContext_2eproto_once,
      file_level_metadata_taoContext_2eproto[1]);
}
// ===================================================================

class MarketDto::_Internal {
 public:
};

MarketDto::MarketDto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:taocontext.MarketDto)
}
MarketDto::MarketDto(const MarketDto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_) {}

    , decltype(_impl_.target_) {}

    , decltype(_impl_.money_) {}

    , decltype(_impl_.targetprec_) {}

    , decltype(_impl_.moneyprec_) {}

    , decltype(_impl_.minamount_) {}

    , decltype(_impl_.minbase_) {}

    , decltype(_impl_.feeprec_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    _this->_impl_.target_.Set(from._internal_target(), _this->GetArenaForAllocation());
  }
  _impl_.money_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.money_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_money().empty()) {
    _this->_impl_.money_.Set(from._internal_money(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.targetprec_, &from._impl_.targetprec_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.feeprec_) -
    reinterpret_cast<char*>(&_impl_.targetprec_)) + sizeof(_impl_.feeprec_));
  // @@protoc_insertion_point(copy_constructor:taocontext.MarketDto)
}

inline void MarketDto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_) {}

    , decltype(_impl_.target_) {}

    , decltype(_impl_.money_) {}

    , decltype(_impl_.targetprec_) { 0 }

    , decltype(_impl_.moneyprec_) { 0 }

    , decltype(_impl_.minamount_) { ::int64_t{0} }

    , decltype(_impl_.minbase_) { ::int64_t{0} }

    , decltype(_impl_.feeprec_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.money_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.money_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketDto::~MarketDto() {
  // @@protoc_insertion_point(destructor:taocontext.MarketDto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_.Destroy();
  _impl_.target_.Destroy();
  _impl_.money_.Destroy();
}

void MarketDto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDto::Clear() {
// @@protoc_insertion_point(message_clear_start:taocontext.MarketDto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _impl_.target_.ClearToEmpty();
  _impl_.money_.ClearToEmpty();
  ::memset(&_impl_.targetprec_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.feeprec_) -
      reinterpret_cast<char*>(&_impl_.targetprec_)) + sizeof(_impl_.feeprec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taocontext.MarketDto.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taocontext.MarketDto.target"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_money();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taocontext.MarketDto.money"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 targetPrec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.targetprec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 moneyPrec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.moneyprec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 feePrec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.feeprec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 minAmount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.minamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 minBase = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.minbase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketDto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taocontext.MarketDto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taocontext.MarketDto.symbol");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string target = 2;
  if (!this->_internal_target().empty()) {
    const std::string& _s = this->_internal_target();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taocontext.MarketDto.target");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string money = 3;
  if (!this->_internal_money().empty()) {
    const std::string& _s = this->_internal_money();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taocontext.MarketDto.money");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 targetPrec = 4;
  if (this->_internal_targetprec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_targetprec(), target);
  }

  // int32 moneyPrec = 5;
  if (this->_internal_moneyprec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_moneyprec(), target);
  }

  // int32 feePrec = 6;
  if (this->_internal_feeprec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_feeprec(), target);
  }

  // int64 minAmount = 7;
  if (this->_internal_minamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        7, this->_internal_minamount(), target);
  }

  // int64 minBase = 8;
  if (this->_internal_minbase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_minbase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taocontext.MarketDto)
  return target;
}

::size_t MarketDto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taocontext.MarketDto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 1;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string target = 2;
  if (!this->_internal_target().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_target());
  }

  // string money = 3;
  if (!this->_internal_money().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_money());
  }

  // int32 targetPrec = 4;
  if (this->_internal_targetprec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_targetprec());
  }

  // int32 moneyPrec = 5;
  if (this->_internal_moneyprec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_moneyprec());
  }

  // int64 minAmount = 7;
  if (this->_internal_minamount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_minamount());
  }

  // int64 minBase = 8;
  if (this->_internal_minbase() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_minbase());
  }

  // int32 feePrec = 6;
  if (this->_internal_feeprec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_feeprec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDto::GetClassData() const { return &_class_data_; }


void MarketDto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDto*>(&to_msg);
  auto& from = static_cast<const MarketDto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taocontext.MarketDto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (!from._internal_money().empty()) {
    _this->_internal_set_money(from._internal_money());
  }
  if (from._internal_targetprec() != 0) {
    _this->_internal_set_targetprec(from._internal_targetprec());
  }
  if (from._internal_moneyprec() != 0) {
    _this->_internal_set_moneyprec(from._internal_moneyprec());
  }
  if (from._internal_minamount() != 0) {
    _this->_internal_set_minamount(from._internal_minamount());
  }
  if (from._internal_minbase() != 0) {
    _this->_internal_set_minbase(from._internal_minbase());
  }
  if (from._internal_feeprec() != 0) {
    _this->_internal_set_feeprec(from._internal_feeprec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDto::CopyFrom(const MarketDto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taocontext.MarketDto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDto::IsInitialized() const {
  return true;
}

void MarketDto::InternalSwap(MarketDto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, lhs_arena,
                                       &other->_impl_.target_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.money_, lhs_arena,
                                       &other->_impl_.money_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDto, _impl_.feeprec_)
      + sizeof(MarketDto::_impl_.feeprec_)
      - PROTOBUF_FIELD_OFFSET(MarketDto, _impl_.targetprec_)>(
          reinterpret_cast<char*>(&_impl_.targetprec_),
          reinterpret_cast<char*>(&other->_impl_.targetprec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_taoContext_2eproto_getter, &descriptor_table_taoContext_2eproto_once,
      file_level_metadata_taoContext_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace taocontext
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::taocontext::OrderDto*
Arena::CreateMaybeMessage< ::taocontext::OrderDto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taocontext::OrderDto >(arena);
}
template<> PROTOBUF_NOINLINE ::taocontext::OrderReplyDto*
Arena::CreateMaybeMessage< ::taocontext::OrderReplyDto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taocontext::OrderReplyDto >(arena);
}
template<> PROTOBUF_NOINLINE ::taocontext::MarketDto*
Arena::CreateMaybeMessage< ::taocontext::MarketDto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taocontext::MarketDto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
